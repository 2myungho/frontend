{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","useEffect","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","onChangeTags","TagList","TagBox","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","match","postId","params","a","delete","ownPost","PostPage","App","component","path","exact","Boolean","window","hostname","unregister","navigator","serviceWorker","ready","then","registration","catch","message","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a614fc73.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;","// source: https://yeun.github.io/open-color/\r\nconst palette = {\r\n    gray: [\r\n      '#f8f9fa',\r\n      '#f1f3f5',\r\n      '#e9ecef',\r\n      '#dee2e6',\r\n      '#ced4da',\r\n      '#adb5bd',\r\n      '#868e96',\r\n      '#495057',\r\n      '#343a40',\r\n      '#212529'\r\n    ],\r\n    cyan: [\r\n      '#e3fafc',\r\n      '#c5f6fa',\r\n      '#99e9f2',\r\n      '#66d9e8',\r\n      '#3bc9db',\r\n      '#22b8cf',\r\n      '#15aabf',\r\n      '#1098ad',\r\n      '#0c8599',\r\n      '#0b7285'\r\n    ]\r\n  };\r\n  \r\n  export default palette;","  \r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${props =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${props =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = props => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: #a1dba8;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  color:#fff;\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n    .outBox{\r\n      border-radius:10px;\r\n      display: flex;\r\n      align-items: center;\r\n      background:#4b9f85;\r\n      padding: 8px 10px;\r\n      &:hover{\r\n        background:#61caa9;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            Lee Myung Ho\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user.username} 님!</UserInfo>\r\n              <Button onClick={onLogout} className=\"outBox\">LOGOUT</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\" className=\"outBox\">LOGIN</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n  글로벌 설정 예시:\r\n  \r\n  // API 주소를 다른 곳으로 사용함\r\n  client.defaults.baseURL = 'https://external-api-server.com/' \r\n  // 헤더 설정\r\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n  // 인터셉터 설정\r\n  axios.intercepter.response.use(\\\r\n    response => {\r\n      // 요청 성공 시 특정 작업 수행\r\n      return response;\r\n    }, \r\n    error => {\r\n      // 요청 실패 시 특정 작업 수행\r\n      return Promise.reject(error);\r\n    }\r\n  })  \r\n*/\r\n\r\nexport default client;","import client from './client';\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post('/api/auth/login', { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n  client.post('/api/auth/register', { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  requestType => requestType\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  requestType => requestType\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default loading;","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = type => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function*(action) {\r\n    yield put(startLoading(type)); // 로딩 시작\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); // 로딩 끝\r\n  };\r\n}","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  'user/CHECK',\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\r\n  } catch (e) {\r\n    console.log('localStorage is not working');\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: state => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${props =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: ${palette.gray[6]};\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n    content: '\\\\B7'; /* 가운뎃점 문자 */\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <span>\r\n        <b>\r\n          <Link to={`/@${username}`}>{username}</Link>\r\n        </b>\r\n      </span>\r\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.cyan[7]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.cyan[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n  return (\r\n    <TagsBlock>\r\n      {tags.map(tag => (\r\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n          #{tag}\r\n        </Link>\r\n      ))}\r\n    </TagsBlock>\r\n  );\r\n};\r\n\r\nexport default Tags;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n  .Button0{\r\n  background:#a1dba8;\r\n  &:hover {\r\n    background: #61caa9;\r\n  }\r\n  padding:10px;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={tags} />\r\n      <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n\r\n  return (\r\n    <PostListBlock>\r\n      <WritePostButtonWrapper>\r\n        {showWriteButton && (\r\n          <Button className=\"Button0\" cyan to=\"/write\">\r\n            새 글 작성하기\r\n          </Button>\r\n        )}\r\n      </WritePostButtonWrapper>\r\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n      {!loading && posts && (\r\n        <div>\r\n          {posts.map(post => (\r\n            <PostItem post={post} key={post._id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </PostListBlock>\r\n  );\r\n};\r\n\r\nexport default PostList;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = id => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = id => client.delete(`/api/posts/${id}`);","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const { tag, username, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, username, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n/* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background:#c6ecca;\r\n  /* flex로 내부 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">Lee Community</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER'\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN'\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value // 실제 바꾸려는 값\r\n  })\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: ''\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  auth: null,\r\n  authError: null\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, draft => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default auth;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n */\r\nconst Footer = styled.div`\r\n  font-weight:600;\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    text-underline-position: under;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n  background:#61caa9;\r\n  &:hover{\r\n    background:#a1dba8;\r\n  }\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입'\r\n};\r\n\r\n/**\r\n * 에러를 보여줍니다\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n  font-weight:600;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({ form: 'register', key: 'password', value: '' });\r\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/'); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = e => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, body } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n  }));\r\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n    dispatch,\r\n  ]);\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n};\r\n\r\nexport default EditorContainer;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n  h4 {\r\n    color: ${palette.gray[8]}\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map(tag => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    tag => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    tag => {\r\n      const nextTags = localTags.filter(t => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback(e => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const tags = useSelector(state => state.write.tags);\r\n\r\n  const onChangeTags = nextTags => {\r\n    dispatch(\r\n      changeField({\r\n        key: 'tags',\r\n        value: nextTags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton cyan onClick={onPublish}>\r\n        포스트 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;","import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);","import React from 'react';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>글 작성하기 - REACTERS</title>\r\n      </Helmet>\r\n\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <Helmet>\r\n        <title>{title} - REACTERS</title>\r\n      </Helmet>\r\n\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfo\r\n          username={user.username}\r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags} />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  onConfirm,\r\n  onCancel,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"포스트 삭제\"\r\n      description=\"포스트를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton>\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        onCancel={onCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>mainPage</title>\n      </Helmet>\n\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n    </>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport loading from './loading';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n\nserviceWorker.unregister();"],"sourceRoot":""}